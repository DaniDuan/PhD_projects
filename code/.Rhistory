main = paste(sp[j],"_", i, "C" ,sep=""),
xlim = c(time[1],time[length(time)]),
ylim =c(min((m_subset[,j]-sd_subset[,j]), na.rm = T),
max(m_subset[,j], na.rm = T)+max(sd_subset[,j],na.rm = T)))
points(time,m_subset[,j], pch = 1)
# lines(time,m_subset[,j], type="b", pch = 1)
arrows(x0=time, y0=m_subset[,j]-sd_subset[,j], x1=time, y1=m_subset[,j]+sd_subset[,j],
code=3, angle=90, lwd=0.6, length = 0.05)
graphics.off()
}
}
for(i in temp){
m_subset = subset(mean, temp == i)
sd_subset = subset(sd, temp == i)
for(j in 1:length(unique(sp))){
png(filename = paste(("../results/TPC/TPC_gr_single/"),sp[j],"_",i,".png", sep=""), width = 480, height = 480)
plot(1, type="n", xlab="Hour", ylab = "OD",
main = paste(sp[j],"_", i, "C" ,sep=""),
xlim = c(time[1],time[length(time)]),
ylim =c(min((m_subset[,j]-sd_subset[,j]), na.rm = T),
max(m_subset[,j], na.rm = T)+max(sd_subset[,j],na.rm = T)))
points(time,m_subset[,j], pch = 1)
# lines(time,m_subset[,j], type="b", pch = 1)
arrows(x0=time, y0=m_subset[,j]-sd_subset[,j], x1=time, y1=m_subset[,j]+sd_subset[,j],
code=3, angle=90, lwd=0.6, length = 0.05)
graphics.off()
}
}
graphics.off()
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
for(s in 1:length(sp)){
png(filename = paste(("../results/TPC/TPC_gr_single_allreps/"),sp[j],"_",i,".png", sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
graphics.off()
}
}
}
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
for(s in 1:length(sp)){
png(filename = paste(("../results/TPC/TPC_gr_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
graphics.off()
}
}
}
all_r = data.frame()
all_AIC = data.frame()
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
N_0_get = apply(subset[1:3], 2, min, na.rm =T) # minimum
K_get = apply(subset[1:3], 2, max, na.rm =T)
slopes = apply(subset[1:3], 2, diff)
slope_max = apply(slopes[-1,], 2, max, na.rm =T)
r = c() ; aic = c()
for(s in 1:length(sp)){
if(s == 1 & i == 28){ subset[subset$time >30 & subset$time < 55,1] = NaN }
png(filename = paste(("../results/TPC/TPC_gr_single/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",
main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
while(any(is.na(subset[,s]))){
subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
}
N_0_start = N_0_get[s]
K_start = K_get[s]
r_max_start = slope_max[s]
t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
sub = data.frame(subset[,s], subset$time)
names(sub) = c("N", "time")
# fitting gompertz
model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
start = list(r_max = r_max_start, K =K_start,
N_0 = N_0_start, t_lag = t_lag_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_gompertz) != "try-error"){
r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
summary(model_fit_gompertz)$coefficients[2],
summary(model_fit_gompertz)$coefficients[3],
summary(model_fit_gompertz)$coefficients[4])
lines(t, gr_gompertz, col = "blue")
}else{r_value_gompertz = NaN; AIC_value_gompertz = NaN}
# fitting logistic
model_fit_logistic = try(nlsLM(N~logistic_model(t = time, r_max, K, N_0), sub,
start = list(r_max=r_max_start, N_0 = N_0_start, K = K_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_logistic) != "try-error"){
r_value_logistic = round(summary(model_fit_logistic)$coefficients[1], 4)
AIC_value_logistic = round(AIC(model_fit_logistic),3)
gr_logistic = logistic_model(t, summary(model_fit_logistic)$coefficients[1],
summary(model_fit_logistic)$coefficients[3],
summary(model_fit_logistic)$coefficients[2])
lines(t, gr_logistic, col = "darkorange")
}else{r_value_logistic = NaN; AIC_value_logistic = NaN}
# }
if(min(AIC_value_logistic, AIC_value_gompertz, na.rm = T) == AIC_value_logistic &
r_value_logistic != 0 |r_value_gompertz > 1.2){
Model = "Logistic"; r_value = r_value_logistic; AIC_value = AIC_value_logistic
}else{Model = "Gompertz"; r_value = r_value_gompertz; AIC_value = AIC_value_gompertz}
text(60, ((max(subset[,s], na.rm = T)+min(subset[,s], na.rm = T))/2),
paste("r=",r_value,"\nModel= ", Model, sep=""))
legend("topleft", c("Gompertz", "Logistic"), col = c("blue", "darkorange"), lty = 1)
# }
graphics.off()
r = c(r, r_value)
aic = c(aic, AIC_value)
}
all_r = rbind(all_r, r)
all_AIC = rbind(all_AIC, aic)
}
}
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
for(s in 1:length(sp)){
png(filename = paste(("../results/TPC/TPC_gr_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
graphics.off()
}
}
}
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
for(s in 1:length(sp)){
png(filename = paste(("../results/TPC/TPC_gr_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
graphics.off()
}
}
}
all_r = data.frame()
all_AIC = data.frame()
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
N_0_get = apply(subset[1:3], 2, min, na.rm =T) # minimum
K_get = apply(subset[1:3], 2, max, na.rm =T)
slopes = apply(subset[1:3], 2, diff)
slope_max = apply(slopes[-1,], 2, max, na.rm =T)
r = c() ; aic = c()
for(s in 1:length(sp)){
if(s == 1 & i == 28){ subset[subset$time >30 & subset$time < 55,1] = NaN }
png(filename = paste(("../results/TPC/TPC_gr_single/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",
main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
while(any(is.na(subset[,s]))){
subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
}
N_0_start = N_0_get[s]
K_start = K_get[s]
r_max_start = slope_max[s]
t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
sub = data.frame(subset[,s], subset$time)
names(sub) = c("N", "time")
# fitting gompertz
model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
start = list(r_max = r_max_start, K =K_start,
N_0 = N_0_start, t_lag = t_lag_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_gompertz) != "try-error"){
r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
summary(model_fit_gompertz)$coefficients[2],
summary(model_fit_gompertz)$coefficients[3],
summary(model_fit_gompertz)$coefficients[4])
lines(t, gr_gompertz, col = "blue")
}else{r_value_gompertz = NaN; AIC_value_gompertz = NaN}
# fitting logistic
model_fit_logistic = try(nlsLM(N~logistic_model(t = time, r_max, K, N_0), sub,
start = list(r_max=r_max_start, N_0 = N_0_start, K = K_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_logistic) != "try-error"){
r_value_logistic = round(summary(model_fit_logistic)$coefficients[1], 4)
AIC_value_logistic = round(AIC(model_fit_logistic),3)
gr_logistic = logistic_model(t, summary(model_fit_logistic)$coefficients[1],
summary(model_fit_logistic)$coefficients[3],
summary(model_fit_logistic)$coefficients[2])
lines(t, gr_logistic, col = "darkorange")
}else{r_value_logistic = NaN; AIC_value_logistic = NaN}
# }
if(min(AIC_value_logistic, AIC_value_gompertz, na.rm = T) == AIC_value_logistic &
r_value_logistic != 0 |r_value_gompertz > 1.2){
Model = "Logistic"; r_value = r_value_logistic; AIC_value = AIC_value_logistic
}else{Model = "Gompertz"; r_value = r_value_gompertz; AIC_value = AIC_value_gompertz}
text(60, ((max(subset[,s], na.rm = T)+min(subset[,s], na.rm = T))/2),
paste("r=",r_value,"\nModel= ", Model, sep=""))
legend("topleft", c("Gompertz", "Logistic"), col = c("blue", "darkorange"), lty = 1)
# }
# graphics.off()
r = c(r, r_value)
aic = c(aic, AIC_value)
}
all_r = rbind(all_r, r)
all_AIC = rbind(all_AIC, aic)
}
}
# }
graphics.off()
all_r = data.frame()
all_AIC = data.frame()
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
N_0_get = apply(subset[1:3], 2, min, na.rm =T) # minimum
K_get = apply(subset[1:3], 2, max, na.rm =T)
slopes = apply(subset[1:3], 2, diff)
slope_max = apply(slopes[-1,], 2, max, na.rm =T)
r = c() ; aic = c()
for(s in 1:length(sp)){
if(s == 1 & i == 28){ subset[subset$time >30 & subset$time < 55,1] = NaN }
png(filename = paste(("../results/TPC/TPC_gr_single/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",
main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
while(any(is.na(subset[,s]))){
subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
}
N_0_start = N_0_get[s]
K_start = K_get[s]
r_max_start = slope_max[s]
t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
sub = data.frame(subset[,s], subset$time)
names(sub) = c("N", "time")
# fitting gompertz
model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
start = list(r_max = r_max_start, K =K_start,
N_0 = N_0_start, t_lag = t_lag_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_gompertz) != "try-error"){
r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
summary(model_fit_gompertz)$coefficients[2],
summary(model_fit_gompertz)$coefficients[3],
summary(model_fit_gompertz)$coefficients[4])
lines(t, gr_gompertz, col = "blue")
}else{r_value_gompertz = NaN; AIC_value_gompertz = NaN}
# fitting logistic
model_fit_logistic = try(nlsLM(N~logistic_model(t = time, r_max, K, N_0), sub,
start = list(r_max=r_max_start, N_0 = N_0_start, K = K_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_logistic) != "try-error"){
r_value_logistic = round(summary(model_fit_logistic)$coefficients[1], 4)
AIC_value_logistic = round(AIC(model_fit_logistic),3)
gr_logistic = logistic_model(t, summary(model_fit_logistic)$coefficients[1],
summary(model_fit_logistic)$coefficients[3],
summary(model_fit_logistic)$coefficients[2])
lines(t, gr_logistic, col = "darkorange")
}else{r_value_logistic = NaN; AIC_value_logistic = NaN}
# }
if(min(AIC_value_logistic, AIC_value_gompertz, na.rm = T) == AIC_value_logistic &
r_value_logistic != 0 |r_value_gompertz > 1.2){
Model = "Logistic"; r_value = r_value_logistic; AIC_value = AIC_value_logistic
}else{Model = "Gompertz"; r_value = r_value_gompertz; AIC_value = AIC_value_gompertz}
text(60, ((max(subset[,s], na.rm = T)+min(subset[,s], na.rm = T))/2),
paste("r=",r_value,"\nModel= ", Model, sep=""))
legend("topleft", c("Gompertz", "Logistic"), col = c("blue", "darkorange"), lty = 1)
# }
graphics.off()
r = c(r, r_value)
aic = c(aic, AIC_value)
}
all_r = rbind(all_r, r)
all_AIC = rbind(all_AIC, aic)
}
}
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
for(s in 1:length(sp)){
png(filename = paste(("../results/TPC/TPC_gr_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
graphics.off()
}
}
}
all_r = data.frame()
all_AIC = data.frame()
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
N_0_get = apply(subset[1:3], 2, min, na.rm =T) # minimum
K_get = apply(subset[1:3], 2, max, na.rm =T)
slopes = apply(subset[1:3], 2, diff)
slope_max = apply(slopes[-1,], 2, max, na.rm =T)
r = c() ; aic = c()
for(s in 1:length(sp)){
if(s == 1 & i == 28){ subset[subset$time >30 & subset$time < 55,1] = NaN }
png(filename = paste(("../results/TPC/TPC_gr_fitting_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",
main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
while(any(is.na(subset[,s]))){
subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
}
N_0_start = N_0_get[s]
K_start = K_get[s]
r_max_start = slope_max[s]
t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
sub = data.frame(subset[,s], subset$time)
names(sub) = c("N", "time")
# fitting gompertz
model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
start = list(r_max = r_max_start, K =K_start,
N_0 = N_0_start, t_lag = t_lag_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_gompertz) != "try-error"){
r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
summary(model_fit_gompertz)$coefficients[2],
summary(model_fit_gompertz)$coefficients[3],
summary(model_fit_gompertz)$coefficients[4])
lines(t, gr_gompertz, col = "blue")
}else{r_value_gompertz = NaN; AIC_value_gompertz = NaN}
# fitting logistic
model_fit_logistic = try(nlsLM(N~logistic_model(t = time, r_max, K, N_0), sub,
start = list(r_max=r_max_start, N_0 = N_0_start, K = K_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_logistic) != "try-error"){
r_value_logistic = round(summary(model_fit_logistic)$coefficients[1], 4)
AIC_value_logistic = round(AIC(model_fit_logistic),3)
gr_logistic = logistic_model(t, summary(model_fit_logistic)$coefficients[1],
summary(model_fit_logistic)$coefficients[3],
summary(model_fit_logistic)$coefficients[2])
lines(t, gr_logistic, col = "darkorange")
}else{r_value_logistic = NaN; AIC_value_logistic = NaN}
# }
if(min(AIC_value_logistic, AIC_value_gompertz, na.rm = T) == AIC_value_logistic &
r_value_logistic != 0 |r_value_gompertz > 1.2){
Model = "Logistic"; r_value = r_value_logistic; AIC_value = AIC_value_logistic
}else{Model = "Gompertz"; r_value = r_value_gompertz; AIC_value = AIC_value_gompertz}
text(60, ((max(subset[,s], na.rm = T)+min(subset[,s], na.rm = T))/2),
paste("r=",r_value,"\nModel= ", Model, sep=""))
legend("topleft", c("Gompertz", "Logistic"), col = c("blue", "darkorange"), lty = 1)
# }
graphics.off()
r = c(r, r_value)
aic = c(aic, AIC_value)
}
all_r = rbind(all_r, r)
all_AIC = rbind(all_AIC, aic)
}
}
for(i in temp){
m_subset = subset(mean, temp == i)
sd_subset = subset(sd, temp == i)
for(j in 1:length(unique(sp))){
png(filename = paste(("../results/TPC/TPC_gr_single/"),sp[j],"_",i,".png", sep=""), width = 480, height = 480)
plot(1, type="n", xlab="Hour", ylab = "OD",
main = paste(sp[j],"_", i, "C" ,sep=""),
xlim = c(time[1],time[length(time)]),
ylim =c(min((m_subset[,j]-sd_subset[,j]), na.rm = T),
max(m_subset[,j], na.rm = T)+max(sd_subset[,j],na.rm = T)))
points(time,m_subset[,j], pch = 1)
# lines(time,m_subset[,j], type="b", pch = 1)
arrows(x0=time, y0=m_subset[,j]-sd_subset[,j], x1=time, y1=m_subset[,j]+sd_subset[,j],
code=3, angle=90, lwd=0.6, length = 0.05)
graphics.off()
}
}
# x = all_r # backup
# all_r = x
all_r[all_r==0] = NaN
all_r[all_AIC>15] = NaN
names(all_r) = sp
all_r$temp = sort(rep(temp,6))
all_r$Rep = rep(1:6,6)
mean = data.frame()
write.csv(all_r, "../results/TPC/Growth_rates.csv", row.names = F)
mean = data.frame()
sd = data.frame()
for(i in temp){
subset = subset(all_r, temp == i)
mean = rbind(mean, colMeans(subset[,1:3], na.rm = T))
sd = rbind(sd, apply(subset[,1:3], 2, sd, na.rm = T))
}
names(mean) = sp
names(sd) = sp
mean$temp = temp
sd$temp = temp
color = c("darkgreen","blue", "darkorange")
png(filename = "../results/TPC/Temperature_performances.png", width = 480, height = 480)
plot(1, type="n", xlab="Temperature", ylab = "Growth rate", main = "Temperature Performance",
xlim = c(temp[1],temp[length(temp)]),
ylim =c(min((mean[,1:3]-sd[,1:3]), na.rm = T),
max((mean[,1:3]+sd[,1:3]), na.rm = T)))
for(i in 1:3){
lines(temp,mean[,i], type="b", pch = 1, col = color[i])
suppressWarnings(arrows(x0=temp, y0=mean[,i]-sd[,i], x1=temp, y1=mean[,i]+sd[,i],
code=3, angle=90, lwd=0.6, length = 0.05, col = color[i]))
}
legend("topleft", sp, cex = 1, col = color, pch = 1, lwd = 1)
graphics.off()
out_p = data.frame()
for(s in 1:length(sp)){
for(rep in 1:6){
subset = all_r[all_r$Rep == rep,]
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf] = NaN
subset$S18[6] = 0
subset$temp = subset$temp + 273.15
if(length(subset[,s][!is.na(subset[,s])]) > 4){
lnB0_start = subset[,s][!is.na(subset[,s])][1]
Th_v = subset[,4][subset[,s] == max(subset[,s], na.rm = T)]
Th_start_v = Th_v[!is.na(Th_v)]
## Fitting lnB ~ -1/k*(1/T-1/283.15) as linear model (Arrhenius)
## intercept = lnB0, slope = Ea
kkt = -1/(k*subset$temp)+1/(285.15*k) # -1/k*(1/T-1/283.15)
befdeact = subset[,s][subset$temp <= Th_start_v] # lnB before deactivation
B_befT = kkt[subset$temp <= Th_start_v] # -1/k*(1/T-1/283.15) before deactivation
lm_Arr = lm(befdeact~B_befT)
lnB0_start_v = summary(lm_Arr)$coefficients[1]
Ea_start_v = summary(lm_Arr)$coefficients[2]
sub = data.frame(N = subset[,s], temp = subset$temp)
results = data.frame()
for(n in 1:500){
lnB0_start = rnorm(1, mean = lnB0_start_v, sd = 1)
Ea_start = rnorm(1, mean = Ea_start_v, sd = 1)
Eh_start = runif(1, 1, 10)
Th_start = rnorm(1, mean = Th_start_v, sd = 10)
fit_Schoolfield = try(nlsLM(N ~ Schoolfield(lnc, E, Eh, Th, temp, Tc = 12), sub,
start = list(lnc=lnB0_start, E=Ea_start, Eh=Eh_start, Th=Th_start),
upper = c(1, 3, Inf, 301.15),
lower = c(-Inf, 0, 0, 283.15),
control = list(maxiter = 500, maxfev = 200), na.action = na.omit), silent = T)
if(class(fit_Schoolfield) != "try-error"){
results = rbind(results, c(summary(fit_Schoolfield)$coefficients[1:4], AIC(fit_Schoolfield)))
}
}
out = as.numeric(c(lnB0_start_v, Ea_start_v, Th_start_v, results[results[,5] == min(results[,5]),][1,]))
lnB0 = out[4]; Ea = out[5]; Eh = out[6]; Th = out[7]
B_plot = exp(Schoolfield(lnB0, Ea, Eh, Th, temp = temp_plot+273.15, Tc = 12))
# B_plot_arr = exp(Schoolfield(lnB0_start_v, Ea_start_v, (5*Ea_start_v), Th_start_v, temp = temp_plot+273.15, Tc = 12))
png(filename = paste(("../results/TPC/TPC_all_reps/"),sp[s], "_", rep, sep = ""), width = 480, height = 480)
plot((subset$temp - 273.15), all_r[all_r$Rep == rep,s], main = paste(sp[s], "_", rep, sep = ""),
ylim = c(min(all_r[all_r$Rep == rep,s], na.rm = T),
(max(all_r[all_r$Rep == rep,s], na.rm = T)+0.2)))
lines(temp_plot, B_plot, col = 'black')
# lines(temp_plot, B_plot_arr, col = 'blue')
# legend("topleft", c("Schoolfield", "Arrhenius"), cex = 1,col = c('black','blue'), lwd = 1)
out_p = rbind(out_p, out)
graphics.off()
}else{
png(filename = paste(("../results/TPC/TPC_all_reps/"),sp[s], "_", rep, sep = ""), width = 480, height = 480)
plot((subset$temp - 273.15), all_r[all_r$Rep == rep,s], main = paste(sp[s], "_", rep, sep = ""),
ylim = c(min(all_r[all_r$Rep == rep,s], na.rm = T),
(max(all_r[all_r$Rep == rep,s], na.rm = T)+0.2)))
out = rep(NaN, 8)
out_p = rbind(out_p, out)
graphics.off()
}
}
}
names(out_p) = c("lnB0_Arr","Ea_Arr", "Th_Arr", "lnB0", "Ea", "Eh", "Th", "AIC")
out_p$Rep = rep(1:6,3)
out_p$sp = sort(rep(sp,6))
graphics.off()
whole_result = out_p # backup
write.csv(whole_result, "../results/TPC/TPCs.csv", row.names = F)
out_p = out_p[out_p$AIC < 20,] # screen out bad fits
out_p = out_p[!is.na(out_p$Ea),]
boxplot(Ea~sp, data = out_p)
boxplot(Th~sp, data = out_p)
boxplot(lnB0~sp, data = out_p)
png(filename = "../results/TPC/Ea", width = 480, height = 480)
boxplot(Ea~sp, data = out_p)
graphics.off()
png(filename = "../results/TPC/Ea", width = 480, height = 480)
boxplot(Ea~sp, data = out_p); graphics.off()
png(filename = "../results/TPC/Th", width = 480, height = 480)
boxplot(Th~sp, data = out_p); graphics.off()
png(filename = "../results/TPC/lnB0", width = 480, height = 480)
boxplot(lnB0~sp, data = out_p); graphics.off()
png(filename = "../results/TPC/TPC_by_mean", width = 480, height = 480)
plot(1, type="n", xlab="Temperature", ylab = "Growth rate", main = "TPC_by_mean",
xlim = c(temp[1],temp[length(temp)]),
ylim =c(0,1.2))
for(s in 1:length(sp)){
mean_school = Schoolfield(lnc = mean_TPC[s,4], E = mean_TPC[s,5], Eh = mean_TPC[s,6],
Th = mean_TPC[s,7], temp = (temp_plot+273.15), Tc = 12)
lines(temp_plot, exp(mean_school), col = color[s])
# polygon(c(temp_plot, temp_plot), c(sd_school_low, sd_school_high), col = "grey")
}
graphics.off()
