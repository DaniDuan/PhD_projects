control = list(maxiter = 500))
}else if(s == 2){
fit <- nlsLM(W02~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else{
fit <- nlsLM(W03~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}
bootresult <-  Boot(fit, method = 'case')
sub <- data.frame(N = all_r[,s], temp = all_r$temp)
d_fit <- nest(sub, data = c(temp, N)) %>%
mutate(sharpeschoolhigh = map(data, ~nlsLM(N~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = .x, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))),
# create new temperature data
new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100))),
# predict over that data,
preds =  map2(sharpeschoolhigh, new_data, ~augment(.x, newdata = .y)))
# unnest predictions
d_preds <- select(d_fit, preds) %>%
unnest(preds)
boot1_preds <- bootresult$t %>%
as.data.frame() %>%
drop_na() %>%
mutate(iter = 1:n()) %>%
group_by_all() %>%
do(data.frame(temp = seq(min(all_r$temp), max(all_r$temp), length.out = 100))) %>%
ungroup() %>%
mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 12))
# calculate bootstrapped confidence intervals
boot1_conf_preds <- group_by(boot1_preds, temp) %>%
summarise(conf_lower = quantile(pred, 0.025),
conf_upper = quantile(pred, 0.975)) %>%
ungroup()
# plot bootstrapped predictions
png(filename = paste("../results/TPC/",sp[s], "_TPC_a.png", sep = ""), width = 960, height = 960)
ggplot() +
geom_line(aes(temp, .fitted), d_preds, col = 'blue') +
geom_line(aes(temp, pred, group = iter), boot1_preds, col = 'blue', alpha = 0.01) +
geom_point(aes(temp, N), sub, size = 2, alpha = 0.5) +
theme_bw(base_size = 12) +
labs(x = 'Temperature (ºC)',
y = 'Intraspecific Interaction',
title = paste(sp[s],'Intraspecific Interaction across temperatures'))+
theme(text = element_text(size = 30))
graphics.off()
s = 3
B0 = est_params[s,5]; Ea = est_params[s,6]; Eh = est_params[s,7]; Th = est_params[s,8]
if(s == 1){
fit <- nlsLM(S18~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else if(s == 2){
fit <- nlsLM(W02~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else{
fit <- nlsLM(W03~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}
bootresult <-  Boot(fit, method = 'case')
sub <- data.frame(N = all_r[,s], temp = all_r$temp)
d_fit <- nest(sub, data = c(temp, N)) %>%
mutate(sharpeschoolhigh = map(data, ~nlsLM(N~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = .x, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))),
# create new temperature data
new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100))),
# predict over that data,
preds =  map2(sharpeschoolhigh, new_data, ~augment(.x, newdata = .y)))
# unnest predictions
d_preds <- select(d_fit, preds) %>%
unnest(preds)
boot1_preds <- bootresult$t %>%
as.data.frame() %>%
drop_na() %>%
mutate(iter = 1:n()) %>%
group_by_all() %>%
do(data.frame(temp = seq(min(all_r$temp), max(all_r$temp), length.out = 100))) %>%
ungroup() %>%
mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 12))
# calculate bootstrapped confidence intervals
boot1_conf_preds <- group_by(boot1_preds, temp) %>%
summarise(conf_lower = quantile(pred, 0.025),
conf_upper = quantile(pred, 0.975)) %>%
ungroup()
# plot bootstrapped predictions
png(filename = paste("../results/TPC/",sp[s], "_TPC_a.png", sep = ""), width = 960, height = 960)
ggplot() +
geom_line(aes(temp, .fitted), d_preds, col = 'blue') +
geom_line(aes(temp, pred, group = iter), boot1_preds, col = 'blue', alpha = 0.01) +
geom_point(aes(temp, N), sub, size = 2, alpha = 0.5) +
theme_bw(base_size = 12) +
labs(x = 'Temperature (ºC)',
y = 'Intraspecific Interaction',
title = paste(sp[s],'Intraspecific Interaction across temperatures'))+
theme(text = element_text(size = 30))
graphics.off()
###################!!!!! Using the same code for a ##############
all_r = all_K
initials = data.frame()
for(s in 1:length(sp)){
# if(length(subset[,s][!is.na(subset[,s])]) > 4){
lnB0_start = min(all_r[1:6,s][!is.na(all_r[,s])], na.rm = T)
Th_v = all_r$temp[all_r[,s] == max(all_r[,s], na.rm = T)] #subset[,4][subset[,s] == max(subset[,s], na.rm = T)]
Th_start = Th_v[!is.na(Th_v)]
## Fitting lnB ~ -1/k*(1/T-1/283.15) as linear model (Arrhenius)
## intercept = lnB0, slope = Ea
kkt = -1/(k*all_r$temp)+1/(285.15*k) # -1/k*(1/T-1/283.15)
befdeact = all_r[,s][all_r$temp <= Th_start] # lnB before deactivation
B_befT = kkt[all_r$temp <= Th_start] # -1/k*(1/T-1/283.15) before deactivation
lm_Arr = lm(befdeact~B_befT)
lnB0_start = summary(lm_Arr)$coefficients[1]
Ea_start = summary(lm_Arr)$coefficients[2]
# row = data.frame(r_tref = exp(lnB0_start), e = Ea_start, eh = 7, th = Th_start)
row = data.frame(r_tref = lnB0_start, e = Ea_start, eh = 7, th = Th_start)
initials = rbind(initials, row)
}
temp_plot = seq(10,30,0.1)
est_params = data.frame()
for(s in 1:3){
start_vals = initials[s,]
sub <- data.frame(N = all_r[,s], temp = all_r$temp)
# get limits
low_lims <- get_lower_lims(sub$temp, sub$N, model_name = 'sharpeschoolhigh_1981')
upper_lims <- get_upper_lims(sub$temp, sub$N, model_name = 'sharpeschoolhigh_1981')
fit <- nls_multstart(N~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = sub,
iter = 2000,
start_lower = start_vals - 10,
start_upper = start_vals + 10,
lower = low_lims,
upper = upper_lims,
supp_errors = 'Y')
plot(sub$temp, -sub$N, main = sp[s])#,
#ylim = c(min(sub$N, na.rm = T), (max(sub$N, na.rm = T)+0.2)))
out = as.numeric(c(start_vals, summary(fit)$coefficients[1:4], AIC(fit)))
B0 = out[5]; Ea = out[6]; Eh = out[7]; Th = out[8]
B_plot = sharpeschoolhigh_1981(temp = temp_plot, r_tref = B0, e = Ea, eh = Eh, th = Th, tref = 12)
# Another_plot = sharpeschoolhigh_1981(temp = temp_plot, r_tref = out[1], e = out[2], eh =out[3], th = out[4], tref = 12)
lines(temp_plot, -B_plot, col = 'black')
# lines(temp_plot, Another_plot, col = 'black')
est_params = rbind(est_params, out)
}
names(est_params) = c("lnB0_Arr","Ea_Arr","Eh_Arr", "Th_Arr", "B0", "Ea", "Eh", "Th", "AIC")
est_params$sp = sp
mean(est_params$B0)
mean(est_params$Ea)
s = 1
B0 = est_params[s,5]; Ea = est_params[s,6]; Eh = est_params[s,7]; Th = est_params[s,8]
if(s == 1){
fit <- nlsLM(S18~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else if(s == 2){
fit <- nlsLM(W02~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else{
fit <- nlsLM(W03~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}
bootresult <-  Boot(fit, method = 'case')
sub <- data.frame(N = all_r[,s], temp = all_r$temp)
d_fit <- nest(sub, data = c(temp, N)) %>%
mutate(sharpeschoolhigh = map(data, ~nlsLM(N~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = .x, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))),
# create new temperature data
new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100))),
# predict over that data,
preds =  map2(sharpeschoolhigh, new_data, ~augment(.x, newdata = .y)))
# unnest predictions
d_preds <- select(d_fit, preds) %>%
unnest(preds)
boot1_preds <- bootresult$t %>%
as.data.frame() %>%
drop_na() %>%
mutate(iter = 1:n()) %>%
group_by_all() %>%
do(data.frame(temp = seq(min(all_r$temp), max(all_r$temp), length.out = 100))) %>%
ungroup() %>%
mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 12))
# calculate bootstrapped confidence intervals
boot1_conf_preds <- group_by(boot1_preds, temp) %>%
summarise(conf_lower = quantile(pred, 0.025),
conf_upper = quantile(pred, 0.975)) %>%
ungroup()
# plot bootstrapped predictions
png(filename = paste("../results/TPC/",sp[s], "_TPC_K.png", sep = ""), width = 960, height = 960)
ggplot() +
geom_line(aes(temp, .fitted), d_preds, col = 'blue') +
geom_line(aes(temp, pred, group = iter), boot1_preds, col = 'blue', alpha = 0.01) +
geom_point(aes(temp, N), sub, size = 2, alpha = 0.5) +
theme_bw(base_size = 12) +
labs(x = 'Temperature (ºC)',
y = 'Carrying Capacity',
title = paste(sp[s],'Carrying Capacity across temperatures'))+
theme(text = element_text(size = 30))
graphics.off()
s =2
B0 = est_params[s,5]; Ea = est_params[s,6]; Eh = est_params[s,7]; Th = est_params[s,8]
if(s == 1){
fit <- nlsLM(S18~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else if(s == 2){
fit <- nlsLM(W02~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else{
fit <- nlsLM(W03~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}
bootresult <-  Boot(fit, method = 'case')
sub <- data.frame(N = all_r[,s], temp = all_r$temp)
d_fit <- nest(sub, data = c(temp, N)) %>%
mutate(sharpeschoolhigh = map(data, ~nlsLM(N~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = .x, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))),
# create new temperature data
new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100))),
# predict over that data,
preds =  map2(sharpeschoolhigh, new_data, ~augment(.x, newdata = .y)))
# unnest predictions
d_preds <- select(d_fit, preds) %>%
unnest(preds)
boot1_preds <- bootresult$t %>%
as.data.frame() %>%
drop_na() %>%
mutate(iter = 1:n()) %>%
group_by_all() %>%
do(data.frame(temp = seq(min(all_r$temp), max(all_r$temp), length.out = 100))) %>%
ungroup() %>%
mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 12))
# calculate bootstrapped confidence intervals
boot1_conf_preds <- group_by(boot1_preds, temp) %>%
summarise(conf_lower = quantile(pred, 0.025),
conf_upper = quantile(pred, 0.975)) %>%
ungroup()
# plot bootstrapped predictions
png(filename = paste("../results/TPC/",sp[s], "_TPC_K.png", sep = ""), width = 960, height = 960)
ggplot() +
geom_line(aes(temp, .fitted), d_preds, col = 'blue') +
geom_line(aes(temp, pred, group = iter), boot1_preds, col = 'blue', alpha = 0.01) +
geom_point(aes(temp, N), sub, size = 2, alpha = 0.5) +
theme_bw(base_size = 12) +
labs(x = 'Temperature (ºC)',
y = 'Carrying Capacity',
title = paste(sp[s],'Carrying Capacity across temperatures'))+
theme(text = element_text(size = 30))
graphics.off()
s = 3
B0 = est_params[s,5]; Ea = est_params[s,6]; Eh = est_params[s,7]; Th = est_params[s,8]
if(s == 1){
fit <- nlsLM(S18~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else if(s == 2){
fit <- nlsLM(W02~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}else{
fit <- nlsLM(W03~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = all_r, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))
}
bootresult <-  Boot(fit, method = 'case')
sub <- data.frame(N = all_r[,s], temp = all_r$temp)
d_fit <- nest(sub, data = c(temp, N)) %>%
mutate(sharpeschoolhigh = map(data, ~nlsLM(N~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 12),
data = .x, start = list(r_tref=B0, e=Ea, eh=Eh, th=Th),
control = list(maxiter = 500))),
# create new temperature data
new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100))),
# predict over that data,
preds =  map2(sharpeschoolhigh, new_data, ~augment(.x, newdata = .y)))
# unnest predictions
d_preds <- select(d_fit, preds) %>%
unnest(preds)
boot1_preds <- bootresult$t %>%
as.data.frame() %>%
drop_na() %>%
mutate(iter = 1:n()) %>%
group_by_all() %>%
do(data.frame(temp = seq(min(all_r$temp), max(all_r$temp), length.out = 100))) %>%
ungroup() %>%
mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 12))
# calculate bootstrapped confidence intervals
boot1_conf_preds <- group_by(boot1_preds, temp) %>%
summarise(conf_lower = quantile(pred, 0.025),
conf_upper = quantile(pred, 0.975)) %>%
ungroup()
# plot bootstrapped predictions
png(filename = paste("../results/TPC/",sp[s], "_TPC_K.png", sep = ""), width = 960, height = 960)
ggplot() +
geom_line(aes(temp, .fitted), d_preds, col = 'blue') +
geom_line(aes(temp, pred, group = iter), boot1_preds, col = 'blue', alpha = 0.01) +
geom_point(aes(temp, N), sub, size = 2, alpha = 0.5) +
theme_bw(base_size = 12) +
labs(x = 'Temperature (ºC)',
y = 'Carrying Capacity',
title = paste(sp[s],'Carrying Capacity across temperatures'))+
theme(text = element_text(size = 30))
graphics.off()
rm(list=ls())
dev.off()
r1 = read.csv("../data/Ramping/OD_readings/Danica_Ramping_rr1.csv")
r2 = read.csv("../data/Ramping/OD_readings/Danica_Ramping_rr2.csv")
r3 = read.csv("../data/Ramping/OD_readings/Danica_Ramping_rr3.csv")
r4 = read.csv("../data/Ramping/OD_readings/Danica_Ramping_rr4.csv")
Ramping = rbind(r1,r2,r3,r4)
Ramping = Ramping[!is.na(Ramping$X.11),] # removing rows without data
Ramping = Ramping[,-1] # removing numbering col
Ramping = Ramping[,-ncol(Ramping)] # removing wavelength col
names(Ramping) = seq(1,ncol(Ramping))
### for timing each relative abundance with OD
Ramping = Ramping[4:11]
Ramping = Ramping[-seq(1, nrow(Ramping), 8),]
Ramping = Ramping[-seq(7, nrow(Ramping), 7),]
rownames(Ramping) = seq(1:1050)
Ramping[which(is.na(Ramping[,2])),2] = Ramping[(which(is.na(Ramping[,2]))+1),2]
Ramping[which(is.na(Ramping[,2])),2] = Ramping[(which(is.na(Ramping[,2]))+1),2]
Ramping[,1:8] = Ramping[,1:8] - Ramping[,2]
Ramping = Ramping[,-2]
temp = c("10C","10_30C","20C","30C","Ramping")
time = c(0,1,2,3,4,4,5,6,6,7,8,8,9,10,10,11,12,12,13,14,14,15,16,16,17,18,18,19,20,20,21,22,22,23,24)
Ramping$temp = rep(temp[sort(rep(1:5,6))], 35)
Ramping$Day = sort(rep(time, 6*5))
Ramping$Rep = rep(1:6,(35*5))
######################## Mean and standard deviation ####################
data = data.frame()
sd = data.frame()
for(j in 4:11){
d = c()
e = c()
for(i in 1:(35*5)){ # 35 plate readings * 5 treatments
d = c(d,mean(Ramping[seq((i-1)*8+2, i*8-1),j] - Ramping[seq((i-1)*8+2, i*8-1),5], na.rm = T))
e = c(e,sd(Ramping[seq((i-1)*8+2, i*8-1),j] - Ramping[seq((i-1)*8+2, i*8-1),5], na.rm = T))
}
data = rbind(data,d)
sd = rbind(sd, e)
}
data = as.data.frame(t(data))
row.names(data) = seq(1,(35*5))
data = data[,-2]
sd = as.data.frame(t(sd))
row.names(sd) = seq(1,(35*5))
sd = sd[,-2]
############################ Plotting OD ##############################
time = c(0,1,2,3,4,4,5,6,6,7,8,8,9,10,10,11,12,12,13,14,14,15,16,16,17,18,18,19,20,20,21,22,22,23,24)
sp = c("S18", "W02", "W03", "S18+W02", "S18+W03", "W02+W03", "All")
temp = c("10C","10_30C","20C","30C","Ramping")
color = c("blue","yellow", "darkorange", "brown", "black")
names(data) = sp
names(sd) = sp
data$temp = rep(temp, 35)
sd$temp = rep(temp,35)
data$day = sort(rep(time, 5))
sd$day = sort(rep(time,5))
data$sp_group = sort(rep(1:35,5))
####################### Relative abundance ###########################
ra = read.csv("../data/Ramping/Relative_abundance.csv")
ra_p = data.frame(matrix(NA, nrow = nrow(ra), ncol = 0))
for(i in 1:3){
ra_p = cbind(ra_p, ra[i*2-1]/(ra[i*2-1]+ra[i*2]), ra[i*2]/(ra[i*2-1]+ra[i*2]))
}
ra_p = cbind(ra_p, ra[7:9]/apply(ra[7:9],1,sum), ra[10:12])
d = unique(ra_p$Day)
t = unique(ra_p$temp)
ra_mean = data.frame()
for(i in 1:(length(t)-1)){
sub = rbind(ra_p[1:6,],subset(ra_p, temp == t[i+1]))
for(j in 1:length(d)){
mean = colMeans(sub[sub$Day==d[j],1:9], na.rm = T)
print(d[j])
ra_mean = rbind(ra_mean, mean)
}
}
names(ra_mean) = colnames(ra_p)[1:9]
# sd_int = c(apply(ra[1:3,1:6], 2,sd), apply(ra[1:3, 7:9],2,sd))
ra_time = seq(0,24,2)[-12][-2]
ra_mean$day = rep(ra_time, 5)
ra_mean$temp = temp[sort(rep(1:5,11))]
sp_ra = c(sp[sort(rep(4:7,2))],sp[7])
spinside = c("S18", "W02", "S18", "W03", "W02", "W03", "S18", "W02", "W03")
colors_ra = c("darkgreen", "blue", "darkgreen", "chocolate2", "blue", "chocolate2", "darkgreen", "blue", "chocolate2")
################################### OD * RA (reps) #####################################################
Ramping_fat = data.frame(replicate(2, Ramping[,1],simplify = F),
replicate(2, Ramping[,2],simplify = F),
replicate(2, Ramping[,3],simplify = F),
replicate(3, Ramping[,4],simplify = F),Ramping[,8:10])
names(Ramping_fat) = names(ra_p)
Ramping_fat$group = c(sort(rep(seq(1,6,1), (30*3))), rep(6,30), rep(7,60),
sort(rep(8:9,(30*3))), sort(rep(10:11,(30*4))))
# group 1
ra_rep = colMeans(ra_p[1:6,1:9], na.rm = T)
Day0 = do.call("rbind", replicate(5, colMeans((ra_rep* Ramping_fat[Ramping_fat$Day == 0,1:9]), na.rm = T), simplify = FALSE))
Day0_sd = do.call("rbind", replicate(5, apply((ra_rep* Ramping_fat[Ramping_fat$Day == 0,1:9]), 2, sd), simplify = FALSE))
Day1 = data.frame(); Day2 = data.frame(); Day1_sd = data.frame(); Day2_sd = data.frame()
for(i in temp){
Day1 = rbind(Day1, colMeans((ra_rep* Ramping_fat[Ramping_fat$Day == 1 & Ramping_fat$temp == i,1:9]), na.rm = T))
Day2 = rbind(Day2, colMeans((ra_rep* Ramping_fat[Ramping_fat$Day == 2 & Ramping_fat$temp == i,1:9]), na.rm = T))
Day1_sd = rbind(Day1_sd, apply((ra_rep* Ramping_fat[Ramping_fat$Day == 1 & Ramping_fat$temp == i,1:9]), 2, sd))
Day2_sd = rbind(Day2_sd, apply((ra_rep* Ramping_fat[Ramping_fat$Day == 1 & Ramping_fat$temp == i,1:9]), 2, sd))
}
names(Day1) = names(Day2) = names(Day1_sd) = names(Day2_sd) = colnames(Day0)
ODra_rep = rbind(Day0, Day1, Day2)# the first part of the data frame
ODra_rep_sd = rbind(Day0_sd, Day1_sd, Day2_sd)
# groups 2-10
list = do.call("rbind", replicate(3,list(c(1,2),c(3,4),c(5,6))))
reps_data = data.frame()
ra_all = data.frame()
for(i in 1:9){
reps_data = rbind(reps_data,
subset(Ramping_fat, group == (i+1) & Rep == list[i,]))
subset = subset(ra_p, Day == (2*(i+1)))
b_subset = do.call("rbind",replicate((length(unique(Ramping_fat$Day[Ramping_fat$group == (i+1)]))+1), subset, simplify = FALSE))
ra_all = rbind(ra_all, b_subset)
}
abs_od = reps_data[1:9]*ra_all[1:9]
abs_od = data.frame(abs_od, reps_data[10:13])
mean = data.frame()
sd = data.frame()
for(i in 1:28){
subset = abs_od[((i-1)*10+1):(i*10),]
for(j in temp){
mean = rbind(mean, colMeans(subset[subset$temp == j,1:9],na.rm = T))
sd = rbind(sd, apply(subset[subset$temp == j,1:9], 2, sd))
}
}
colnames(mean) = colnames(ODra_rep)
ODra_rep = rbind(ODra_rep, mean)
colnames(sd) = colnames(ODra_rep_sd)
ODra_rep_sd = rbind(ODra_rep_sd, sd)
# group 11
ra_rep = do.call("rbind", replicate(4, subset(ra_p, Day == 24), simplify = FALSE))
data = cbind(Ramping_fat[Ramping_fat$group == 11,1:9]*ra_rep[1:9], Ramping_fat[Ramping_fat$group == 11,10:13])
mean = data.frame()
sd = data.frame()
for(i in 1:4){
subset = data[((i-1)*30+1):(i*30),]
for(j in temp){
mean = rbind(mean, colMeans(subset[subset$temp == j,1:9],na.rm = T))
sd = rbind(sd, apply(subset[subset$temp == j,1:9], 2, sd))
}
}
colnames(mean) = colnames(ODra_rep)
ODra_rep = rbind(ODra_rep, mean)
colnames(sd) = colnames(ODra_rep_sd)
ODra_rep_sd = rbind(ODra_rep_sd, sd)
ODra_rep$day = sort(rep(time[0:35],5))
ODra_rep_sd$day = sort(rep(time[0:35],5))
ODra_rep$temp = rep(temp,35)
ODra_rep_sd$temp = rep(temp,35)
sp_ra = c(sp[sort(rep(4:7,2))],sp[7])
spinside = c("S18", "W02", "S18", "W03", "W02", "W03", "S18", "W02", "W03")
colors_ra = c("darkgreen", "blue", "darkgreen", "chocolate2", "blue", "chocolate2", "darkgreen", "blue", "chocolate2")
ODra_rep[ODra_rep$temp == "10C",][1:5,]
View(ODra_rep)
View(ODra_rep_sd)
ref_biomass_sd = ODra_rep_sd[ODra_rep_sd$temp == "10C",][1:5,]
ref_biomass$day = ref_biomass_sd$day = c(0, 11.5, 24, 35.5, 45)
### interaction data from day0 to day4
ref_biomass = ODra_rep[ODra_rep$temp == "10C",][1:5,]
ref_biomass_sd = ODra_rep_sd[ODra_rep_sd$temp == "10C",][1:5,]
ref_biomass$day = ref_biomass_sd$day = c(0, 11.5, 24, 35.5, 45)
colnames(ref_biomass) = colnames(ref_biomass_sd) = c("S18","W02","S18.1","W03","W02.1","W03.1","S18.2","W02.2","W03.2","hour","temp")
write.csv(ref_biomass_sd, "../results/TPC/ref_biomass_sd.csv", row.names=FALSE)
View(ref_biomass)
View(ref_biomass_sd)
View(ra_p)
View(ref_biomass)
View(ref_biomass_sd)
View(ref_biomass)
View(ref_biomass_sd)
na.rm(ref_biomass_sd)
ref_biomass_sd[ref_biomass_sd == NA]
ref_biomass_sd
is.na(ref_biomass_sd)
ref_biomass_sd[is.na(ref_biomass_sd)] = NaN
ref_biomass_sd
write.csv(ref_biomass_sd, "../results/TPC/ref_biomass_sd.csv", row.names=FALSE)
ref_biomass_sd[is.na(ref_biomass_sd)] = missing
ref_biomass_sd[is.na(ref_biomass_sd)] = "missing"
ref_biomass_sd
write.csv(ref_biomass_sd, "../results/TPC/ref_biomass_sd.csv", row.names=FALSE)
ref_biomass_sd = ODra_rep_sd[ODra_rep_sd$temp == "10C",][1:5,]
ref_biomass_sd[is.na(ref_biomass_sd)] = 0
write.csv(ref_biomass_sd, "../results/TPC/ref_biomass_sd.csv", row.names=FALSE)
ref_biomass_sd
ref_biomass_sd = ODra_rep_sd[ODra_rep_sd$temp == "10C",][1:5,]
ref_biomass_sd[is.na(ref_biomass_sd)] = 0
ref_biomass$day = ref_biomass_sd$day = c(0, 11.5, 24, 35.5, 45)
colnames(ref_biomass) = colnames(ref_biomass_sd) = c("S18","W02","S18.1","W03","W02.1","W03.1","S18.2","W02.2","W03.2","hour","temp")
write.csv(ref_biomass, "../results/TPC/ref_biomass.csv", row.names=FALSE)
write.csv(ref_biomass_sd, "../results/TPC/ref_biomass_sd.csv", row.names=FALSE)
ref_biomass
ref_biomass = ODra_rep[ODra_rep$temp == "10C",][1:5,]
ref_biomass_sd = ODra_rep_sd[ODra_rep_sd$temp == "10C",][1:5,]
ref_biomass_sd[is.na(ref_biomass_sd)] = 0
ref_biomass$day = ref_biomass_sd$day = c(0, 11.5, 24, 35.5, 45)
colnames(ref_biomass) = colnames(ref_biomass_sd) = c("S18","W02","S18.1","W03","W02.1","W03.1","S18.2","W02.2","W03.2","hour","temp")
write.csv(ref_biomass, "../results/TPC/ref_biomass.csv", row.names=FALSE)
write.csv(ref_biomass_sd, "../results/TPC/ref_biomass_sd.csv", row.names=FALSE)
ref_biomass
ref_biomass_sd
