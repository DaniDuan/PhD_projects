main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
while(any(is.na(subset[,s]))){
subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
}
N_0_start = N_0_get[s]
K_start = K_get[s]
r_max_start = slope_max[s]
t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
sub = data.frame(subset[,s], subset$time)
names(sub) = c("N", "time")
# fitting gompertz
model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
start = list(r_max = r_max_start, K =K_start,
N_0 = N_0_start, t_lag = t_lag_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_gompertz) != "try-error"){
r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
K_value_gompertz = round(summary(model_fit_gompertz)$coefficients[2], 4)
AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
summary(model_fit_gompertz)$coefficients[2],
summary(model_fit_gompertz)$coefficients[3],
summary(model_fit_gompertz)$coefficients[4])
lines(t, gr_gompertz, col = "blue")
}else{r_value_gompertz = NaN; K_value_gompertz = NaN; AIC_value_gompertz = NaN}
# fitting logistic
model_fit_logistic = try(nlsLM(N~logistic_model(t = time, r_max, K, N_0), sub,
start = list(r_max=r_max_start, N_0 = N_0_start, K = K_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_logistic) != "try-error"){
r_value_logistic = round(summary(model_fit_logistic)$coefficients[1], 4)
K_value_logistic = round(summary(model_fit_logistic)$coefficients[3], 4)
AIC_value_logistic = round(AIC(model_fit_logistic),3)
gr_logistic = logistic_model(t, summary(model_fit_logistic)$coefficients[1],
summary(model_fit_logistic)$coefficients[3],
summary(model_fit_logistic)$coefficients[2])
lines(t, gr_logistic, col = "darkorange")
}else{r_value_logistic = NaN; K_value_logistic = NaN; AIC_value_logistic = NaN}
# }
if(is.nan(AIC_value_gompertz) | AIC_value_logistic - AIC_value_gompertz < -3 & r_value_logistic != 0 |r_value_gompertz > 1.5){
Model = "Logistic"; r_value = r_value_logistic; K_value = K_value_logistic; AIC_value = AIC_value_logistic
}else{Model = "Gompertz"; r_value = r_value_gompertz; K_value = K_value_gompertz; AIC_value = AIC_value_gompertz}
text(60, ((max(subset[,s], na.rm = T)+min(subset[,s], na.rm = T))/2),
paste("r=",r_value,"\nModel= ", Model, sep=""))
legend("topleft", c("Gompertz", "Logistic"), col = c("blue", "darkorange"), lty = 1)
# }
# graphics.off()
r = c(r, r_value)
K = c(K, exp(K_value))
aic = c(aic, AIC_value)
}
all_r = rbind(all_r, r)
all_K = rbind(all_K, K)
all_AIC = rbind(all_AIC, aic)
}
}
# x = all_r # backup
# all_r = x
all_K[all_r==0] = NaN
all_r[all_r==0] = NaN
# all_r[all_AIC>15] = NaN
all_K[all_r>1.5] = NaN
all_r[all_r>1.5] = NaN
names(all_r) = sp
names(all_K) = sp
all_r$temp = sort(rep(temp,6))
all_K$temp = sort(rep(temp,6))
all_r$Rep = rep(1:6,6)
all_K$Rep = rep(1:6,6)
all_r$W02[35] = NaN # value too much higher than all other 5 replicates
all_K$W02[35] = NaN
all_r$W02[23] = NaN # value too much lower than all other 5 replicates
all_K$W02[23] = NaN
all_K$S18[all_r$S18<0.1] = NaN # Irregular low value comparing with the point plot
all_r$S18[all_r$S18<0.1] = NaN
all_a = cbind(all_r[,1:3]/all_K[,1:3], all_r[,4:5])
### before high temp deactivation
long_r = melt(all_r[all_r$temp< 23,1:3])
long_K = melt(all_K[all_K$temp< 23,1:3])
d# long_r$temp = rep(all_r$temp, 3)
# long_K$temp = rep(all_K$temp, 3)
all_long = cbind(long_r[,2][!is.na(long_r[,2])], long_K[,2][!is.na(long_K[,2])])
View(all_long)
# plotting r vs. K
color = c("blue", "lightblue", "yellow", "darkorange", "brown", "black")
temp = unique(all_r$temp)
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-4.3,1), ylim =c(-3.5,0.5), main ="r vs. K",
cex.lab=1, cex.axis=1, cex.main=1.5)
temp
for(i in 1:4){
points(log(unlist(all_r[((i-1)*6+1):(i*6),1:3])), log(unlist(all_K[((i-1)*6+1):(i*6),1:3])),
col = color[i], cex = 1, lwd = 1.5)
}
op <- par(cex = 1)
legend("topleft", legend = temp, cex = 1, col = color, pch = 1, lwd = 1.5)
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,1), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, ")")),
cex.lab=1, cex.axis=1, cex.main=1.5)
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
legend("topright", legend = temp, cex = 1, col = color, pch = 1, lwd = 1.5)
for(i in 1:4){
points(log(unlist(all_r[((i-1)*6+1):(i*6),1:3])), log(unlist(all_K[((i-1)*6+1):(i*6),1:3])),
col = color[i], cex = 1, lwd = 1.5)
}
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)",
#      main = "log_rK", cex.lab=2, cex.axis=2, cex.main=2.5, cex = 3)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)")
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
png(filename = "../results/TPC/log_r_K_befdeac.png", width = 480, height = 480)
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:4){
points(log(unlist(all_r[((i-1)*6+1):(i*6),1:3])), log(unlist(all_K[((i-1)*6+1):(i*6),1:3])),
col = color[i], cex = 1, lwd = 1.5)
}
# op <- par(cex = 1)
legend("topright", legend = temp, cex = 1, col = color, pch = 1, lwd = 1.5)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)",
#      main = "log_rK", cex.lab=2, cex.axis=2, cex.main=2.5, cex = 3)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)")
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
text(0,0, paste("ρ =", round(rho_log, 4)), cex = 1)
graphics.off()
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:4){
points(log(unlist(all_r[((i-1)*6+1):(i*6),1:3])), log(unlist(all_K[((i-1)*6+1):(i*6),1:3])),
col = color[i], cex = 1, lwd = 1.5)
}
# op <- par(cex = 1)
legend("topright", legend = temp, cex = 1, col = color, pch = 1, lwd = 1.5)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)",
#      main = "log_rK", cex.lab=2, cex.axis=2, cex.main=2.5, cex = 3)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)")
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
text(0,0, paste("ρ =", round(rho_log, 4)), cex = 1)
text(-0.5,0, paste("ρ =", round(rho_log, 4)), cex = 1)
png(filename = "../results/TPC/log_r_K_befdeac.png", width = 480, height = 480)
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:4){
points(log(unlist(all_r[((i-1)*6+1):(i*6),1:3])), log(unlist(all_K[((i-1)*6+1):(i*6),1:3])),
col = color[i], cex = 1, lwd = 1.5)
}
# op <- par(cex = 1)
legend("topright", legend = temp, cex = 1, col = color, pch = 1, lwd = 1.5)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)",
#      main = "log_rK", cex.lab=2, cex.axis=2, cex.main=2.5, cex = 3)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)")
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
text(-0.5,0, paste("ρ =", round(rho_log, 4)), cex = 1)
graphics.off()
png(filename = "../results/TPC/log_r_K_befdeac.png", width = 480, height = 480)
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:4){
points(log(unlist(all_r[((i-1)*6+1):(i*6),1:3])), log(unlist(all_K[((i-1)*6+1):(i*6),1:3])),
col = color[i], cex = 1, lwd = 1.5)
}
# op <- par(cex = 1)
legend("topright", legend = temp[1:4], cex = 1, col = color[1:4], pch = 1, lwd = 1.5)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)",
#      main = "log_rK", cex.lab=2, cex.axis=2, cex.main=2.5, cex = 3)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)")
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
text(-0.5,0, paste("ρ =", round(rho_log, 4)), cex = 1)
graphics.off()
rm(list=ls())
dev.off()
library(minpack.lm)
library(nls.multstart)
library(tidyverse)
library(broom)
library(ggplot2)
d1 = read.csv("../data/TPC/Danica_TPC.csv")
d2 = read.csv("../data/TPC/Danica_TPC_1.csv")
d3 = read.csv("../data/TPC/Danica_TPC_2.csv")
TPC = rbind(d1,d2,d3)
TPC = TPC[!is.na(TPC$X.13),] # removing rows without data
TPC = TPC[,-1] # removing numbering col
TPC = TPC[,-ncol(TPC)] # removing wavelength col
### for timing each relative abundance with OD
TPC = TPC[4:9]
TPC = TPC[-seq(1, nrow(TPC), 8),]
TPC = TPC[-seq(7, nrow(TPC), 7),]
rownames(TPC) = seq(1:nrow(TPC))
TPC[,seq(1,6,2)] = TPC[,seq(1,6,2)] - TPC[,seq(2,6,2)]
TPC = TPC[,-seq(2,6,2)]
temp = c(12, 15, 18, 22, 25, 28)
time = c(0, 10.5, 14.5, 18.5, 22.5, 35, 38.5, 42.5, 46.5, 58.5, 62.5, 66.5, 70.5, 83,
86.5, 90.5, 94.5, 107.5, 119)
sp = c("S18", "W02", "W03")
names(TPC) = sp
TPC$temp = rep(sort(rep(temp, 6)), 19)
TPC$time = sort(rep(time, 36))
TPC$Rep = rep(1:6,(19*6))
mean = data.frame()
sd = data.frame()
for(i in temp){
subset = subset(TPC, temp == i)
for(j in time){
mean = rbind(mean, colMeans(subset[subset$time == j,1:3], na.rm = T))
sd = rbind(sd, apply(subset[subset$time == j,1:3], 2, sd))
}
}
names(mean) = sp
names(sd) = sp
mean$temp = sort(rep(temp, 19))
sd$temp = sort(rep(temp, 19))
mean$time = rep(time, 6)
sd$time = rep(time, 6)
################################# fitting the growth model###################################
logistic_model <- function(t, r_max, K, N_0){ # The classic logistic equation
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
gompertz_model = function(t, r_max, K, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
t = seq(time[1],time[length(time)] , 0.1)
TPC$S18[TPC$temp == 28 & (TPC$time > 30 & TPC$time < 50)] # removing irregular measurements
all_r = data.frame()
all_K = data.frame()
all_AIC = data.frame()
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
N_0_get = apply(subset[1:3], 2, min, na.rm =T) # minimum
K_get = apply(subset[1:3], 2, max, na.rm =T)
slopes = apply(subset[1:3], 2, diff)
slope_max = apply(slopes[-1,], 2, max, na.rm =T)
r = c() ; K = c(); aic = c()
for(s in 1:length(sp)){
if(s == 1 & i == 28){ subset[subset$time >30 & subset$time < 55,1] = NaN }
# png(filename = paste(("../results/TPC/TPC_gr_fitting_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",
main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
while(any(is.na(subset[,s]))){
subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
}
N_0_start = N_0_get[s]
K_start = K_get[s]
r_max_start = slope_max[s]
t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
sub = data.frame(subset[,s], subset$time)
names(sub) = c("N", "time")
# fitting gompertz
model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
start = list(r_max = r_max_start, K =K_start,
N_0 = N_0_start, t_lag = t_lag_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_gompertz) != "try-error"){
r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
K_value_gompertz = round(summary(model_fit_gompertz)$coefficients[2], 4)
AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
summary(model_fit_gompertz)$coefficients[2],
summary(model_fit_gompertz)$coefficients[3],
summary(model_fit_gompertz)$coefficients[4])
lines(t, gr_gompertz, col = "blue")
}else{r_value_gompertz = NaN; K_value_gompertz = NaN; AIC_value_gompertz = NaN}
# fitting logistic
model_fit_logistic = try(nlsLM(N~logistic_model(t = time, r_max, K, N_0), sub,
start = list(r_max=r_max_start, N_0 = N_0_start, K = K_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_logistic) != "try-error"){
r_value_logistic = round(summary(model_fit_logistic)$coefficients[1], 4)
K_value_logistic = round(summary(model_fit_logistic)$coefficients[3], 4)
AIC_value_logistic = round(AIC(model_fit_logistic),3)
gr_logistic = logistic_model(t, summary(model_fit_logistic)$coefficients[1],
summary(model_fit_logistic)$coefficients[3],
summary(model_fit_logistic)$coefficients[2])
lines(t, gr_logistic, col = "darkorange")
}else{r_value_logistic = NaN; K_value_logistic = NaN; AIC_value_logistic = NaN}
# }
if(is.nan(AIC_value_gompertz) | AIC_value_logistic - AIC_value_gompertz < -3 & r_value_logistic != 0 |r_value_gompertz > 1.5){
Model = "Logistic"; r_value = r_value_logistic; K_value = K_value_logistic; AIC_value = AIC_value_logistic
}else{Model = "Gompertz"; r_value = r_value_gompertz; K_value = K_value_gompertz; AIC_value = AIC_value_gompertz}
text(60, ((max(subset[,s], na.rm = T)+min(subset[,s], na.rm = T))/2),
paste("r=",r_value,"\nModel= ", Model, sep=""))
legend("topleft", c("Gompertz", "Logistic"), col = c("blue", "darkorange"), lty = 1)
# }
# graphics.off()
r = c(r, r_value)
K = c(K, exp(K_value))
aic = c(aic, AIC_value)
}
all_r = rbind(all_r, r)
all_K = rbind(all_K, K)
all_AIC = rbind(all_AIC, aic)
}
}
# S18, 12C
graphics.off()
# x = all_r # backup
# all_r = x
all_K[all_r==0] = NaN
all_r[all_r==0] = NaN
# all_r[all_AIC>15] = NaN
all_K[all_r>1.5] = NaN
all_r[all_r>1.5] = NaN
names(all_r) = sp
names(all_K) = sp
all_r$temp = sort(rep(temp,6))
all_K$temp = sort(rep(temp,6))
all_r$Rep = rep(1:6,6)
all_K$Rep = rep(1:6,6)
all_r$W02[35] = NaN # value too much higher than all other 5 replicates
all_K$W02[35] = NaN
all_r$W02[23] = NaN # value too much lower than all other 5 replicates
all_K$W02[23] = NaN
all_K$S18[all_r$S18<0.1] = NaN # Irregular low value comparing with the point plot
all_r$S18[all_r$S18<0.1] = NaN
all_a = cbind(all_r[,1:3]/all_K[,1:3], all_r[,4:5])
# for(i in temp){
#   subset = subset(all_r, temp == i)
#   mean = rbind(mean, colMeans(subset[,1:3], na.rm = T))
#   sd = rbind(sd, apply(subset[,1:3], 2, sd, na.rm = T))
# }
# names(mean) = sp
# names(sd) = sp
# mean$temp = temp
# sd$temp = temp
#
color = c("darkgreen","blue", "darkorange")
############################## Fitting with all reps for r ###################################
library(rTPC)
library(boot)
library(car)
mod = 'sharpeschoolhigh_1981'
# all_rlog = data.frame(log(all_r[,1:3]), all_r$temp)
# names(all_rlog) = names(all_r[1:4])
# all_rlog$temp = all_rlog$temp+273.15
k = 8.61*10^(-5)
################################## r vs. K ########################################
library(reshape2)
long_r = melt(all_r[,1:3])
long_K = melt(all_K[,1:3])
long_r$temp = rep(all_r$temp, 3)
long_K$temp = rep(all_K$temp, 3)
all_long = cbind(long_r[,2][!is.na(long_r[,2])], long_K[,2][!is.na(long_K[,2])])
temp = unique(all_r$temp)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-4.3,1), ylim =c(-3.5,0.5), main ="r vs. K",
cex.lab=1, cex.axis=1, cex.main=1.5)
# ### before high temp deactivation
long_r = melt(all_r[all_r$temp< 23,1:3])
long_K = melt(all_K[all_K$temp< 23,1:3])
all_long = cbind(long_r[,2][!is.na(long_r[,2])], long_K[,2][!is.na(long_K[,2])])
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
all_r[all_r<25,]
all_r[all_r$temp<25,]
all_r[all_r$temp<25,i]
i = 1
all_r[all_r$temp<25,i]
color
for(i in 1:3){
points(log(all_r[all_r$temp<25,i]), log(all_K[all_K$temp<25,i]), color = color[i], cex = 1, lwd = 1.5)
}
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:3){
points(log(all_r[all_r$temp<25,i]), log(all_K[all_K$temp<25,i]), col = color[i], cex = 1, lwd = 1.5)
}
sp
# op <- par(cex = 1)
legend("topright", legend = sp, cex = 1, col = color, pch = 1, lwd = 1.5)
# ### before high temp deactivation
long_r = melt(all_r[all_r$temp< 25,1:3])
long_K = melt(all_K[all_K$temp< 25,1:3])
all_long = cbind(long_r[,2][!is.na(long_r[,2])], long_K[,2][!is.na(long_K[,2])])
png(filename = "../results/TPC/log_r_K_befdeac.png", width = 480, height = 480)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:3){
points(log(all_r[all_r$temp<25,i]), log(all_K[all_K$temp<25,i]), col = color[i], cex = 1, lwd = 1.5)
}
# op <- par(cex = 1)
legend("topright", legend = sp, cex = 1, col = color, pch = 1, lwd = 1.5)
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
text(-0.5,0, paste("ρ =", round(rho_log, 4)), cex = 1)
graphics.off()
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:3){
points(log(all_r[all_r$temp<25,i]), log(all_K[all_K$temp<25,i]), col = color[i], cex = 1, lwd = 1.5)
}
# op <- par(cex = 1)
legend("topright", legend = sp, cex = 1, col = color, pch = 2, lwd = 1.5)
# op <- par(cex = 1)
legend("topright", legend = sp, cex = 1, col = color, pch = 1)
library(reshape2)
long_r = melt(all_r[,1:3])
long_K = melt(all_K[,1:3])
long_r$temp = rep(all_r$temp, 3)
long_K$temp = rep(all_K$temp, 3)
all_long = cbind(long_r[,2][!is.na(long_r[,2])], long_K[,2][!is.na(long_K[,2])])
# plotting r vs. K
color = c("blue", "lightblue", "yellow", "darkorange", "brown", "black")
temp = unique(all_r$temp)
################################## r vs. K ########################################
library(reshape2)
long_r = melt(all_r[,1:3])
long_K = melt(all_K[,1:3])
long_r$temp = rep(all_r$temp, 3)
long_K$temp = rep(all_K$temp, 3)
all_long = cbind(long_r[,2][!is.na(long_r[,2])], long_K[,2][!is.na(long_K[,2])])
# plotting r vs. K
color = c("blue", "lightblue", "yellow", "darkorange", "brown", "black")
temp = unique(all_r$temp)
png(filename = "../results/TPC/log_r_K.png", width = 480, height = 480)
# plot(1, type="n", xlab="log(r)", ylab = "log(K)", main ="r vs. K",
#      xlim = c(-4.3,0.5),
#      ylim =c(-3.3,0),
#      cex.lab=1, cex.axis=1, cex.main=1.5)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-4.3,1), ylim =c(-3.5,0.5), main ="r vs. K",
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:length(temp)){
points(log(unlist(all_r[((i-1)*6+1):(i*6),1:3])), log(unlist(all_K[((i-1)*6+1):(i*6),1:3])),
col = color[i], cex = 1, lwd = 1.5)
}
op <- par(cex = 1)
legend("topleft", legend = temp, cex = 1, col = color, pch = 1)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)",
#      main = "log_rK", cex.lab=2, cex.axis=2, cex.main=2.5, cex = 3)
# plot(log(long_r[,2]), log(long_K[,2]), type = "p", xlab = "log(r)", ylab = "log(K)")
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
text(0,0, paste("ρ =", round(rho_log, 4)), cex = 1)
graphics.off()
# ### before high temp deactivation
long_r = melt(all_r[all_r$temp< 25,1:3])
long_K = melt(all_K[all_K$temp< 25,1:3])
all_long = cbind(long_r[,2][!is.na(long_r[,2])], long_K[,2][!is.na(long_K[,2])])
color_sp = c("darkgreen", "blue", "chocolate2")
png(filename = "../results/TPC/log_r_K_befdeac.png", width = 480, height = 480)
dataEllipse(log(all_long)[,1], log(all_long)[,2], levels= 0.95, grid = F, lty = 2,
col = "black", lwd = 1, center.cex= 0.5, xlab = "log(r)", ylab = "log(K)",
xlim = c(-2.3,0.5), ylim =c(-3.5,0.5), main = expression(paste("r vs. K (before 25",degree, "C)")),
cex.lab=1, cex.axis=1, cex.main=1.5)
for(i in 1:3){
points(log(all_r[all_r$temp<25,i]), log(all_K[all_K$temp<25,i]), col = color_sp[i], cex = 1, lwd = 1.5)
}
# op <- par(cex = 1)
legend("topright", legend = sp, cex = 1, col = color_sp, pch = 1)
cov_log = cov(log(all_long))
rho_log = cov_log[1,2] / (sqrt(cov_log[1,1]) * sqrt(cov_log[2,2]))
text(-0.5,0, paste("ρ =", round(rho_log, 4)), cex = 1)
graphics.off()
