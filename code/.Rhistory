Ramping = Ramping[,-1] # removing numbering col
Ramping = Ramping[,-ncol(Ramping)] # removing wavelength col
names(Ramping) = seq(1,ncol(Ramping))
######################## Mean and standard deviation ####################
data = data.frame()
sd = data.frame()
for(j in 4:11){
d = c()
e = c()
for(i in 1:(35*5)){ # 35 plate readings * 5 treatments
d = c(d,mean(Ramping[seq((i-1)*8+2, i*8-1),j] - Ramping[seq((i-1)*8+2, i*8-1),5], na.rm = T))
e = c(e,sd(Ramping[seq((i-1)*8+2, i*8-1),j] - Ramping[seq((i-1)*8+2, i*8-1),5], na.rm = T))
}
data = rbind(data,d)
sd = rbind(sd, e)
}
data = as.data.frame(t(data))
row.names(data) = seq(1,(35*5))
data = data[,-2]
sd = as.data.frame(t(sd))
row.names(sd) = seq(1,(35*5))
sd = sd[,-2]
############################ Plotting OD ##############################
time = c(0,1,2,3,4,4,5,6,6,7,8,8,9,10,10,11,12,12,13,14,14,15,16,16,17,18,18,19,20,20,21,22,22,23,24)
sp = c("S18", "W02", "W03", "S18+W02", "S18+W03", "W02+W03", "All")
temp = c("10C","10_30C","20C","30C","Ramping")
color = c("blue","yellow", "darkorange", "brown", "black")
names(data) = sp
names(sd) = sp
data$temp = rep(temp, 35)
sd$temp = rep(temp,35)
data$day = sort(rep(time, 5))
sd$day = sort(rep(time,5))
data$sp_group = sort(rep(1:35,5))
pdf("../results/Ramping_OD_bytemp_20J.pdf")
for(i in 1:7){ # Species
# png(filename = paste(("../results/Ramping_OD_bytemp/OD_temp_"),sp[i],".png", sep=""), width = 480, height = 480)
plot(1, type="n", xlab="Day", ylab = "OD",
main = sp[i], xlim = c(time[1],time[length(time)]),
ylim =c(min(data[1:175,(8-i)]-sd[1:175,(8-i)]),max(data[1:175,(8-i)]+sd[1:175,(8-i)])))
for(j in 1:5){ # temperature treatment
# if(j == 3| j == 2){
lines(time, data[seq(j,175,5),(8-i)], col = color[j], type="b", pch = 1)
arrows(x0=time, y0=data[seq(j,175,5),(8-i)]-sd[seq(j,175,5),(8-i)],
x1=time, y1=data[seq(j,175,5),(8-i)]+sd[seq(j,175,5),(8-i)],
code=3, angle=90, lwd=1, length = 0.05, col = color[j])
# }
}
abline(v = 13, lty = 3)
legend("topleft", c(temp[3],temp[2]), cex = 1, col = c(color[3],color[2]), pch = 1, lwd = 1)
# graphics.off()
}
graphics.off()
######################## Initial growth ############################
pdf("../results/Ramping_initial.pdf")
for(i in 1:7){
for(j in 1:5){
if(j == 1|j == 3| j == 4){
plot(time[1:5], data[seq(j,25,5),(8-i)], main = paste(sp[i],"_",temp[j]),
xlab = "Day", ylab = "OD",
ylim =c(min(data[seq(j,25,5),(8-i)]-sd[seq(j,25,5),(8-i)]),max(data[seq(j,25,5),(8-i)]+sd[seq(j,25,5),(8-i)])),
type = "o")
arrows(x0=time[1:5], y0=data[seq(j,25,5),(8-i)]-sd[seq(j,25,5),(8-i)], x1=time[1:5], y1=data[seq(j,25,5),(8-i)]+sd[seq(j,25,5),(8-i)], code=3, angle=90, lwd=0.6, length = 0.05)
}
}
}
graphics.off()
pdf("../results/Ramping_initial_bytemp.pdf")
for(i in 1:7){
# png(filename = paste(("../results/Ramping_initial_bytemp/initial_temp_"),sp[i],".png", sep=""), width = 480, height = 480)
plot(1, type="n", xlab="Day", ylab = "OD",
main = sp[i], xlim = c(time[1],time[5]),
ylim =c(min(data[1:30,(8-i)]-sd[1:30,(8-i)]),max(data[1:30,(8-i)]+sd[1:30,(8-i)])))
for(j in 1:5){
if(j == 1|j == 3| j == 4){
lines(time[1:5], data[seq(j,25,5),(8-i)], col = color[j], type="b", pch = 1)
arrows(x0=time[1:5], y0=data[seq(j,25,5),(8-i)]-sd[seq(j,25,5),(8-i)],
x1=time[1:5], y1=data[seq(j,25,5),(8-i)]+sd[seq(j,25,5),(8-i)],
code=3, angle=90, lwd=1, length = 0.05, col = color[j])
}
legend("topleft", c("10C", "20C", "30C"), cex = 1, col = color, pch = 1, lwd = 1)
}
# graphics.off()
}
graphics.off()
####################### Initial growth rate ###########################
log_od = data.frame()
for(i in 1:25){
log_od= rbind(log_od, log(Ramping[seq((i-1)*8+2, i*8-1), 4:11] - mean(Ramping[seq((i-1)*8+2, i*8-1), 5], na.rm = T)))
}
# log_od[is.na(log_od)] = 0
# log_od[log_od == -Inf] = 0
log_od = log_od[-2]
r_data = data.frame()
for(s in 1:7){
for (reps in 1:30) { # 6 reps * 5 treatments
dp = c()
for(t in 1:5){
dp = c(dp, log_od[(30*(t - 1)+reps), s])
}
r_data = rbind(r_data, dp)
}
}
names(r_data) = time[1:5]
pdf("../results/ramping_initial_all_reps.pdf")
data_123 = data.frame()
for(s in 1:7){
for(i in 1:5){
if(i == 1 || i == 3|| i == 4){
r_123 = r_data[((s-1)*30+(i-1)*6+1) :((s-1)*30+6*i),]
data_123 = rbind(data_123, r_123) # 6 replicates in 3 temperatures in 7 species groups
for(reps in 1:6){
plot(time[1:5], r_123[reps,], xlab = "Day", ylab = "log(OD)",
main = paste(sp[s], "_", temp[i],"_",reps, sep = ""), type = "o")
}
}
}
}
graphics.off()
# getting the highest slope as growth rate
slopes = data.frame(matrix(NA, nrow = nrow(data_123), ncol = 0))
for(i in 1:4){
slopes = cbind(slopes, data_123[,i+1] - data_123[,i])
}
r = apply(slopes, 1, max, na.rm =T)
all_means = c()
all_sd = c()
for(i in 1:(3*7)){
all_means = c(all_means, mean(r[(6*(i-1)+1):(6*i)], na.rm = T))
all_sd = c(all_sd, sd(r[(6*(i-1)+1):(6*i)], na.rm = T))
}
all_sd[is.na(all_sd)] = 0
pdf("../results/Ramping_initial_gr_bytemp.pdf")
color_by_sp = c("darkgreen", "blue", "chocolate2", "darkblue", "burlywood4", "blueviolet", "black")
pch_by_sp = c(1,1,1,2,4,5,3)
plot(1, type="n", xlab="Temps", ylab = "Growth Rate (Day)",
main = "Initial Growth Rates", xlim = c(10,30),
ylim =c(min(all_means),max(all_means)))
for(s in 1:7){
lines(c(10,20,30),all_means[(3*(s-1)+1) : (3*(s-1)+3)], col = color_by_sp[s],
pch = pch_by_sp[s] ,lwd = 1, type="b")
# arrows(x0=c(10,20,30),
#        y0=all_means[(3*(s-1)+1) : (3*(s-1)+3)] - all_sd[(3*(s-1)+1) : (3*(s-1)+3)],
#        x1=c(10,20,30),
#        y1=all_means[(3*(s-1)+1) : (3*(s-1)+3)] + all_sd[(3*(s-1)+1) : (3*(s-1)+3)],
#        code=3, angle=90, lwd=1, length = 0.05, col = color_by_sp[s])
}
legend("topleft", sp, cex = 1, col = color_by_sp, pch = pch_by_sp, bty="n",
ncol = 2, lwd = 1, inset=c(-0.12,-0.17), xpd = T)
graphics.off()
######################### Plotting growth rate for all #######################
### initial growth rate for all treatments
data_in = data.frame()
for(s in 1:7){
for(i in 1:5){
r_all = r_data[((s-1)*30+(i-1)*6+1) :((s-1)*30+6*i),]
data_in = rbind(data_in, r_all) # 6 replicates in 5 treatments in 7 species groups
}
}
# getting the highest slope as growth rate
slopes_in = data.frame(matrix(NA, nrow = nrow(data_in), ncol = 0))
for(i in 1:4){
slopes_in = cbind(slopes_in, data_in[,i+1] - data_in[,i])
}
r_in = apply(slopes_in, 1, max, na.rm =T)
in_means = c()
in_sd = c()
for(i in 1:(5*7)){
in_means = c(in_means, mean(r_in[(6*(i-1)+1):(6*i)], na.rm = T))
in_sd = c(in_sd, sd(r_in[(6*(i-1)+1):(6*i)], na.rm = T))
}
in_sd[is.na(in_sd)] = 0
in_gr = data.frame()
for(s in 1:7){ # 5 treatments, 7 species groups
in_gr = rbind(in_gr,in_means[(5*(s-1)+1) : (5*(s-1)+5)])
}
### all growth rate close to carrying capacity
log_all = data.frame()
for(i in 26:175){
log_all= rbind(log_all, log(Ramping[seq((i-1)*8+2, i*8-1), 4:11] - mean(Ramping[seq((i-1)*8+2, i*8-1), 5], na.rm = T)))
}
log_all = log_all[-2]
rall_data = data.frame()
for(s in 1:7){
for (reps in 1:30) { # 6 reps * 5 treatments
dp = c()
for(t in 1:30){ # 35 - 5 = 30
dp = c(dp, log_all[(30*(t - 1)+reps), s])
}
rall_data = rbind(rall_data, dp)
}
}
names(rall_data) = time[6:35]
data_5 = data.frame()
for(s in 1:7){
for(i in 1:5){
r_5 = rall_data[((s-1)*30+(i-1)*6+1) :((s-1)*30+6*i),]
data_5 = rbind(data_5, r_5) # 6 replicates in 5 treatments in 7 species groups
for(reps in 1:6){
plot(time[6:35], r_5[reps,], xlab = "Day", ylab = "log(OD)",
main = paste(sp[s], "_", temp[i],"_",reps, sep = ""), type = "o")
}
}
}
# getting the highest slope as growth rate
slopes_all = data.frame(matrix(NA, nrow = nrow(data_5), ncol = 0))
for(i in 1:29){
slopes_all = cbind(slopes_all, data_5[,i+1] - data_5[,i])
}
slopes_all = slopes_all[,-seq(3,29,3)]
all_mx_gr = data.frame(matrix(NA, nrow = nrow(slopes_all), ncol = 0))
for(i in 1:10){ # 10 groups of growth rates, compare every pair for maximum
subset = cbind(slopes_all[2*(i-1)+1], slopes_all[2*i])
all_mx_gr = cbind(all_mx_gr, apply(subset, 1, max, na.rm =F))
}
rm(list=ls())
dev.off()
library(minpack.lm)
library(nls.multstart)
d1 = read.csv("../data/TPC/Danica_TPC.csv")
d2 = read.csv("../data/TPC/Danica_TPC_1.csv")
d3 = read.csv("../data/TPC/Danica_TPC_2.csv")
TPC = rbind(d1,d2,d3)
TPC = TPC[!is.na(TPC$X.13),] # removing rows without data
TPC = TPC[,-1] # removing numbering col
TPC = TPC[,-ncol(TPC)] # removing wavelength col
### for timing each relative abundance with OD
TPC = TPC[4:9]
TPC = TPC[-seq(1, nrow(TPC), 8),]
TPC = TPC[-seq(7, nrow(TPC), 7),]
rownames(TPC) = seq(1:nrow(TPC))
TPC[,seq(1,6,2)] = TPC[,seq(1,6,2)] - TPC[,seq(2,6,2)]
TPC = TPC[,-seq(2,6,2)]
temp = c(12, 15, 18, 22, 25, 28)
time = c(0, 10.5, 14.5, 18.5, 22.5, 35, 38.5, 42.5, 46.5, 58.5, 62.5, 66.5, 70.5, 83,
86.5, 90.5, 94.5, 107.5, 119)
sp = c("S18", "W02", "W03")
names(TPC) = sp
TPC$temp = rep(sort(rep(temp, 6)), 19)
TPC$time = sort(rep(time, 36))
TPC$Rep = rep(1:6,(19*6))
mean = data.frame()
sd = data.frame()
for(i in temp){
subset = subset(TPC, temp == i)
for(j in time){
mean = rbind(mean, colMeans(subset[subset$time == j,1:3], na.rm = T))
sd = rbind(sd, apply(subset[subset$time == j,1:3], 2, sd))
}
}
names(mean) = sp
names(sd) = sp
mean$temp = sort(rep(temp, 19))
sd$temp = sort(rep(temp, 19))
mean$time = rep(time, 6)
sd$time = rep(time, 6)
pdf("../results/TPC/TPC_gr_single.pdf")
for(i in temp){
m_subset = subset(mean, temp == i)
sd_subset = subset(sd, temp == i)
for(j in 1:length(unique(sp))){
# png(filename = paste(("../results/TPC/TPC_gr_single/"),sp[j],"_",i,".png", sep=""), width = 480, height = 480)
plot(1, type="n", xlab="Hour", ylab = "OD",
main = paste(sp[j],"_", i, "C" ,sep=""),
xlim = c(time[1],time[length(time)]),
ylim =c(min((m_subset[,j]-sd_subset[,j]), na.rm = T),
max(m_subset[,j], na.rm = T)+max(sd_subset[,j],na.rm = T)))
points(time,m_subset[,j], pch = 1)
# lines(time,m_subset[,j], type="b", pch = 1)
arrows(x0=time, y0=m_subset[,j]-sd_subset[,j], x1=time, y1=m_subset[,j]+sd_subset[,j],
code=3, angle=90, lwd=0.6, length = 0.05)
# graphics.off()
}
}
graphics.off()
pdf("../results/TPC/TPC_gr_single_allreps.pdf")
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
for(s in 1:length(sp)){
# png(filename = paste(("../results/TPC/TPC_gr_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
# graphics.off()
}
}
}
graphics.off()
################################# fitting the growth model###################################
logistic_model <- function(t, r_max, K, N_0){ # The classic logistic equation
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
gompertz_model = function(t, r_max, K, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
t = seq(time[1],time[length(time)] , 0.1)
TPC$S18[TPC$temp == 28 & (TPC$time > 30 & TPC$time < 50)] # removing irregular measurements
pdf("../results/TPC/TPC_gr_fitting_single_allreps.pdf")
all_r = data.frame()
all_AIC = data.frame()
for(i in temp){
for(rep in 1:6){
subset = subset(TPC, temp == i & Rep == rep)
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf| subset == Inf] = NaN
N_0_get = apply(subset[1:3], 2, min, na.rm =T) # minimum
K_get = apply(subset[1:3], 2, max, na.rm =T)
slopes = apply(subset[1:3], 2, diff)
slope_max = apply(slopes[-1,], 2, max, na.rm =T)
r = c() ; aic = c()
for(s in 1:length(sp)){
if(s == 1 & i == 28){ subset[subset$time >30 & subset$time < 55,1] = NaN }
# png(filename = paste(("../results/TPC/TPC_gr_fitting_single_allreps/"),sp[s],"_",i,"_",rep,sep=""), width = 480, height = 480)
plot(time,subset[,s], xlab = "Hour", ylab = "log(OD)",
main = paste(sp[s],"_",i,"_",rep,sep="") , pch = 1)
while(any(is.na(subset[,s]))){
subset[which(is.na(subset[,s])),s] = subset[(which(is.na(subset[,s]))+1),s]
}
N_0_start = N_0_get[s]
K_start = K_get[s]
r_max_start = slope_max[s]
t_lag_start = time[which.max(diff(diff(subset[,s])))] - time[1]
if(t_lag_start>40 || t_lag_start == 0){t_lag_start = 10}
sub = data.frame(subset[,s], subset$time)
names(sub) = c("N", "time")
# fitting gompertz
model_fit_gompertz = try(nlsLM(N~gompertz_model(t = time, r_max, K, N_0, t_lag), sub,
start = list(r_max = r_max_start, K =K_start,
N_0 = N_0_start, t_lag = t_lag_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_gompertz) != "try-error"){
r_value_gompertz = round(summary(model_fit_gompertz)$coefficients[1], 4)
AIC_value_gompertz = round(AIC(model_fit_gompertz),3)
gr_gompertz = gompertz_model(t, summary(model_fit_gompertz)$coefficients[1],
summary(model_fit_gompertz)$coefficients[2],
summary(model_fit_gompertz)$coefficients[3],
summary(model_fit_gompertz)$coefficients[4])
lines(t, gr_gompertz, col = "blue")
}else{r_value_gompertz = NaN; AIC_value_gompertz = NaN}
# fitting logistic
model_fit_logistic = try(nlsLM(N~logistic_model(t = time, r_max, K, N_0), sub,
start = list(r_max=r_max_start, N_0 = N_0_start, K = K_start),
control = list(maxiter = 500)),silent = T)
if(class(model_fit_logistic) != "try-error"){
r_value_logistic = round(summary(model_fit_logistic)$coefficients[1], 4)
AIC_value_logistic = round(AIC(model_fit_logistic),3)
gr_logistic = logistic_model(t, summary(model_fit_logistic)$coefficients[1],
summary(model_fit_logistic)$coefficients[3],
summary(model_fit_logistic)$coefficients[2])
lines(t, gr_logistic, col = "darkorange")
}else{r_value_logistic = NaN; AIC_value_logistic = NaN}
# }
if(min(AIC_value_logistic, AIC_value_gompertz, na.rm = T) == AIC_value_logistic &
r_value_logistic != 0 |r_value_gompertz > 1.2){
Model = "Logistic"; r_value = r_value_logistic; AIC_value = AIC_value_logistic
}else{Model = "Gompertz"; r_value = r_value_gompertz; AIC_value = AIC_value_gompertz}
text(60, ((max(subset[,s], na.rm = T)+min(subset[,s], na.rm = T))/2),
paste("r=",r_value,"\nModel= ", Model, sep=""))
legend("topleft", c("Gompertz", "Logistic"), col = c("blue", "darkorange"), lty = 1)
# }
# graphics.off()
r = c(r, r_value)
aic = c(aic, AIC_value)
}
all_r = rbind(all_r, r)
all_AIC = rbind(all_AIC, aic)
}
}
# S18, 12C
graphics.off()
# x = all_r # backup
# all_r = x
all_r[all_r==0] = NaN
all_r[all_AIC>15] = NaN
names(all_r) = sp
all_r$temp = sort(rep(temp,6))
all_r$Rep = rep(1:6,6)
mean = data.frame()
sd = data.frame()
for(i in temp){
subset = subset(all_r, temp == i)
mean = rbind(mean, colMeans(subset[,1:3], na.rm = T))
sd = rbind(sd, apply(subset[,1:3], 2, sd, na.rm = T))
}
names(mean) = sp
names(sd) = sp
mean$temp = temp
sd$temp = temp
color = c("darkgreen","blue", "darkorange")
# png(filename = "../results/TPC/Temperature_performances.png", width = 480, height = 480)
plot(1, type="n", xlab="Temperature", ylab = "Growth rate", main = "Temperature Performance",
xlim = c(temp[1],temp[length(temp)]),
ylim =c(min((mean[,1:3]-sd[,1:3]), na.rm = T),
max((mean[,1:3]+sd[,1:3]), na.rm = T)))
for(i in 1:3){
lines(temp,mean[,i], type="b", pch = 1, col = color[i])
suppressWarnings(arrows(x0=temp, y0=mean[,i]-sd[,i], x1=temp, y1=mean[,i]+sd[,i],
code=3, angle=90, lwd=0.6, length = 0.05, col = color[i]))
}
legend("topleft", sp, cex = 1, col = color, pch = 1, lwd = 1)
graphics.off()
# Schoolfield <- function(lnc, E, Eh, Th, temp, Tc) {# The calculatied result is lnB
#   Tc <- 273.15 + Tc
#   k <- 8.62e-5
#   sch <- lnc-(E/k)*(1/temp - 1/Tc)-log(1+(E/(Eh-E))*exp((Eh/k)*(1/Th - 1/temp)))
#   return(sch)
# }
Schoolfield <- function(lnc, E, Eh, Th, temp, Tc) {
Tc <- 273.15 + Tc
k <- 8.62e-5
boltzmann.term <- lnc + log(exp(E/k*(1/Tc - 1/temp)))
inactivation.term <- log(1/(1 + exp(Eh/k*(1/Th - 1/temp))))
return(boltzmann.term + inactivation.term)
}
temp_plot = seq(temp[1], temp[length(temp)], 0.1)
k <- 8.62e-5
out_p = data.frame()
for(s in 1:length(sp)){
for(rep in 1:6){
subset = all_r[all_r$Rep == rep,]
subset[,1:3] = log(subset[,1:3])
subset[subset == -Inf] = NaN
subset$S18[6] = 0
subset$temp = subset$temp + 273.15
if(length(subset[,s][!is.na(subset[,s])]) > 4){
lnB0_start = subset[,s][!is.na(subset[,s])][1]
Th_v = subset[,4][subset[,s] == max(subset[,s], na.rm = T)]
Th_start_v = Th_v[!is.na(Th_v)]
## Fitting lnB ~ -1/k*(1/T-1/283.15) as linear model (Arrhenius)
## intercept = lnB0, slope = Ea
kkt = -1/(k*subset$temp)+1/(285.15*k) # -1/k*(1/T-1/283.15)
befdeact = subset[,s][subset$temp <= Th_start_v] # lnB before deactivation
B_befT = kkt[subset$temp <= Th_start_v] # -1/k*(1/T-1/283.15) before deactivation
lm_Arr = lm(befdeact~B_befT)
lnB0_start_v = summary(lm_Arr)$coefficients[1]
Ea_start_v = summary(lm_Arr)$coefficients[2]
sub = data.frame(N = subset[,s], temp = subset$temp)
results = data.frame()
for(n in 1:500){
lnB0_start = rnorm(1, mean = lnB0_start_v, sd = 1)
Ea_start = rnorm(1, mean = Ea_start_v, sd = 1)
Eh_start = runif(1, 1, 10)
Th_start = rnorm(1, mean = Th_start_v, sd = 10)
fit_Schoolfield = try(nlsLM(N ~ Schoolfield(lnc, E, Eh, Th, temp, Tc = 12), sub,
start = list(lnc=lnB0_start, E=Ea_start, Eh=Eh_start, Th=Th_start),
upper = c(1, 3, Inf, 301.15),
lower = c(-Inf, 0, 0, 283.15),
control = list(maxiter = 500, maxfev = 200), na.action = na.omit), silent = T)
if(class(fit_Schoolfield) != "try-error"){
results = rbind(results, c(summary(fit_Schoolfield)$coefficients[1:4], AIC(fit_Schoolfield)))
}
}
out = as.numeric(c(lnB0_start_v, Ea_start_v, Th_start_v, results[results[,5] == min(results[,5]),][1,]))
lnB0 = out[4]; Ea = out[5]; Eh = out[6]; Th = out[7]
B_plot = exp(Schoolfield(lnB0, Ea, Eh, Th, temp = temp_plot+273.15, Tc = 12))
# B_plot_arr = exp(Schoolfield(lnB0_start_v, Ea_start_v, (5*Ea_start_v), Th_start_v, temp = temp_plot+273.15, Tc = 12))
# png(filename = paste(("../results/TPC/TPC_all_reps/"),sp[s], "_", rep, sep = ""), width = 480, height = 480)
plot((subset$temp - 273.15), all_r[all_r$Rep == rep,s], main = paste(sp[s], "_", rep, sep = ""),
ylim = c(min(all_r[all_r$Rep == rep,s], na.rm = T),
(max(all_r[all_r$Rep == rep,s], na.rm = T)+0.2)))
lines(temp_plot, B_plot, col = 'black')
# lines(temp_plot, B_plot_arr, col = 'blue')
# legend("topleft", c("Schoolfield", "Arrhenius"), cex = 1,col = c('black','blue'), lwd = 1)
out_p = rbind(out_p, out)
# graphics.off()
}else{
# png(filename = paste(("../results/TPC/TPC_all_reps/"),sp[s], "_", rep, sep = ""), width = 480, height = 480)
plot((subset$temp - 273.15), all_r[all_r$Rep == rep,s], main = paste(sp[s], "_", rep, sep = ""),
ylim = c(min(all_r[all_r$Rep == rep,s], na.rm = T),
(max(all_r[all_r$Rep == rep,s], na.rm = T)+0.2)))
out = rep(NaN, 8)
out_p = rbind(out_p, out)
# graphics.off()
}
}
}
names(out_p) = c("lnB0_Arr","Ea_Arr", "Th_Arr", "lnB0", "Ea", "Eh", "Th", "AIC")
out_p$Rep = rep(1:6,3)
out_p$sp = sort(rep(sp,6))
whole_result = out_p # backup
out_p = out_p[out_p$AIC < 20,] # screen out bad fits
out_p = out_p[!is.na(out_p$Ea),]
# write.csv(whole_result, "../results/TPC/TPCs.csv", row.names = F)
whole_result = read.csv("../results/TPC/TPCs.csv")
out_p = whole_result
out_p = out_p[out_p$AIC < 20,] # screen out bad fits
out_p = out_p[!is.na(out_p$Ea),]
png(filename = "../results/TPC/Ea.png", width = 480, height = 480)
boxplot(Ea~sp, data = out_p); graphics.off()
png(filename = "../results/TPC/Th.png", width = 480, height = 480)
boxplot(Th~sp, data = out_p); graphics.off()
png(filename = "../results/TPC/lnB0.png", width = 480, height = 480)
boxplot(lnB0~sp, data = out_p); graphics.off()
temp_plot = seq(temp[1], temp[length(temp)], 0.1)
k <- 8.62e-5
# Schoolfield <- function(lnc, E, Eh, Th, temp, Tc) {# The calculatied result is lnB
#   Tc <- 273.15 + Tc
#   k <- 8.62e-5
#   sch <- lnc-(E/k)*(1/temp - 1/Tc)-log(1+(E/(Eh-E))*exp((Eh/k)*(1/Th - 1/temp)))
#   return(sch)
# }
Schoolfield <- function(lnc, E, Eh, Th, temp, Tc) {
Tc <- 273.15 + Tc
k <- 8.62e-5
boltzmann.term <- lnc + log(exp(E/k*(1/Tc - 1/temp)))
inactivation.term <- log(1/(1 + exp(Eh/k*(1/Th - 1/temp))))
return(boltzmann.term + inactivation.term)
}
# write.csv(whole_result, "../results/TPC/TPCs.csv", row.names = F)
whole_result = read.csv("../results/TPC/TPCs.csv")
out_p = whole_result
